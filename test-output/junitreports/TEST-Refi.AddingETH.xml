<?xml version="1.0" encoding="UTF-8"?>
<!-- Generated by org.testng.reporters.JUnitReportReporter -->
<testsuite hostname="DESKTOP-DG4NUTJ" failures="0" tests="14" name="Refi.AddingETH" time="129.440" errors="1" timestamp="2021-12-14T10:34:06 IST" skipped="13">
  <testcase classname="Refi.AddingETH" name="Healthratio" time="129.440">
    <error message="For input string: &quot;2%&quot;" type="java.lang.NumberFormatException">
      <![CDATA[java.lang.NumberFormatException: For input string: "2%"
at java.base/jdk.internal.math.FloatingDecimal.readJavaFormatString(FloatingDecimal.java:2054)
at java.base/jdk.internal.math.FloatingDecimal.parseDouble(FloatingDecimal.java:110)
at java.base/java.lang.Double.parseDouble(Double.java:556)
at java.base/java.lang.Double.valueOf(Double.java:519)
at Refi.Homepage.Healthratio(Homepage.java:544)
at Refi.AddingETH.Healthratio(AddingETH.java:144)
at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:78)
at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
at java.base/java.lang.reflect.Method.invoke(Method.java:567)
at org.testng.internal.MethodInvocationHelper.invokeMethod(MethodInvocationHelper.java:132)
at org.testng.internal.TestInvoker.invokeMethod(TestInvoker.java:599)
at org.testng.internal.TestInvoker.invokeTestMethod(TestInvoker.java:174)
at org.testng.internal.MethodRunner.runInSequence(MethodRunner.java:46)
at org.testng.internal.TestInvoker$MethodInvocationAgent.invoke(TestInvoker.java:822)
at org.testng.internal.TestInvoker.invokeTestMethods(TestInvoker.java:147)
at org.testng.internal.TestMethodWorker.invokeTestMethods(TestMethodWorker.java:146)
at org.testng.internal.TestMethodWorker.run(TestMethodWorker.java:128)
at java.base/java.util.ArrayList.forEach(ArrayList.java:1511)
at org.testng.TestRunner.privateRun(TestRunner.java:764)
at org.testng.TestRunner.run(TestRunner.java:585)
at org.testng.SuiteRunner.runTest(SuiteRunner.java:384)
at org.testng.SuiteRunner.runSequentially(SuiteRunner.java:378)
at org.testng.SuiteRunner.privateRun(SuiteRunner.java:337)
at org.testng.SuiteRunner.run(SuiteRunner.java:286)
at org.testng.SuiteRunnerWorker.runSuite(SuiteRunnerWorker.java:53)
at org.testng.SuiteRunnerWorker.run(SuiteRunnerWorker.java:96)
at org.testng.TestNG.runSuitesSequentially(TestNG.java:1218)
at org.testng.TestNG.runSuitesLocally(TestNG.java:1140)
at org.testng.TestNG.runSuites(TestNG.java:1069)
at org.testng.TestNG.run(TestNG.java:1037)
at org.testng.remote.AbstractRemoteTestNG.run(AbstractRemoteTestNG.java:115)
at org.testng.remote.RemoteTestNG.initAndRun(RemoteTestNG.java:251)
at org.testng.remote.RemoteTestNG.main(RemoteTestNG.java:77)
]]>
    </error>
  </testcase> <!-- Healthratio -->
  <system-out/>
  <testcase classname="Refi.AddingETH" name="Borrowlimtcalculation">
    <skipped/>
  </testcase> <!-- Borrowlimtcalculation -->
  <system-out/>
  <testcase classname="Refi.AddingETH" name="Borrowloan">
    <skipped/>
  </testcase> <!-- Borrowloan -->
  <system-out/>
  <testcase classname="Refi.AddingETH" name="Repayloanmax">
    <skipped/>
  </testcase> <!-- Repayloanmax -->
  <system-out/>
  <testcase classname="Refi.AddingETH" name="checkingconnection">
    <skipped/>
  </testcase> <!-- checkingconnection -->
  <system-out/>
  <testcase classname="Refi.AddingETH" name="Repayloan">
    <skipped/>
  </testcase> <!-- Repayloan -->
  <system-out/>
  <testcase classname="Refi.AddingETH" name="loantoval">
    <skipped/>
  </testcase> <!-- loantoval -->
  <system-out/>
  <testcase classname="Refi.AddingETH" name="Maxwithdraweth">
    <skipped/>
  </testcase> <!-- Maxwithdraweth -->
  <system-out/>
  <testcase classname="Refi.AddingETH" name="viewonether">
    <skipped/>
  </testcase> <!-- viewonether -->
  <system-out/>
  <testcase classname="Refi.AddingETH" name="valulterrormessage">
    <skipped/>
  </testcase> <!-- valulterrormessage -->
  <system-out/>
  <testcase classname="Refi.AddingETH" name="borrowingpower">
    <skipped/>
  </testcase> <!-- borrowingpower -->
  <system-out/>
  <testcase classname="Refi.AddingETH" name="disconn">
    <skipped/>
  </testcase> <!-- disconn -->
  <system-out/>
  <testcase classname="Refi.AddingETH" name="ETHdesposit">
    <skipped/>
  </testcase> <!-- ETHdesposit -->
  <system-out/>
  <testcase classname="Refi.AddingETH" name="WithdrawETH">
    <skipped/>
  </testcase> <!-- WithdrawETH -->
  <system-out/>
</testsuite> <!-- Refi.AddingETH -->
